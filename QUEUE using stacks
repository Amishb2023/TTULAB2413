typedef struct {
    int ar[100];
    int head;
    int tail;
    int count;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* obj = (MyQueue*)malloc(sizeof(MyQueue));
    obj->head = 0;
    obj->tail = 0;
    obj->count = 0;
    return obj;
}

void myQueuePush(MyQueue* obj, int x) {
    if (obj == NULL || obj->count >= 100) return;  
    
    obj->ar[obj->tail] = x;
    obj->tail = (obj->tail + 1) % 100;
    obj->count++;
}

int myQueuePop(MyQueue* obj) {
    if (obj == NULL || obj->count == 0) return -1; 
    int result = obj->ar[obj->head];
    obj->head = (obj->head + 1) % 100;
    obj->count--;
    return result;
}

int myQueuePeek(MyQueue* obj) {
    if (obj == NULL || obj->count == 0) return -1; 
    
    return obj->ar[obj->head];
}

bool myQueueEmpty(MyQueue* obj) {
    if (obj == NULL) return false;
    
    return obj->count == 0;
}

void myQueueFree(MyQueue* obj) {
    if (obj == NULL) return;
    free(obj);
}
